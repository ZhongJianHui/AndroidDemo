apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'AndResGuard'
apply plugin: 'com.google.protobuf'


android {

    compileSdkVersion COMPILE_SDK_VERSION as int

    signingConfigs {
        signing {
            keyAlias 'demo'
            keyPassword 'demo123'
            storeFile file('../demo.jks')
            storePassword 'demo123'
        }
    }

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
//        externalNativeBuild {
//            cmake {
//                cppFlags 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64', 'x86', 'x86_64'
//            }
//        }
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64', 'x86', 'x86_64'
        }

        defaultConfig {
            resConfigs "zh"
        }

        signingConfig signingConfigs.signing
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    //自定义apk名称含版本号信息
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "Demo2018-VC(${variant.versionCode})-VN(${variant.versionName})-${getDate()}.apk"
        }
    }

    sourceSets {
        main {
            // 定义proto文件目录
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

String getDate() {
    return new Date().format('(yyyy-MM-dd HH.mm.ss)')
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31"
    implementation "androidx.appcompat:appcompat:$ANDROID_X_SDK_VERSION"
    implementation "androidx.recyclerview:recyclerview:$ANDROID_X_SDK_VERSION"
    implementation "com.google.android.material:material:$ANDROID_X_SDK_VERSION"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-alpha5"
    //----------运行时注解--------------------------------------------------------------------------------------------------------
    implementation project(':annotations')
    kapt project(':processor')
    //与强度无关的高斯模糊
    implementation 'com.mainli:blur:1.0.0'
    implementation 'com.seekting:demolib:1.2.11'
    if (Boolean.parseBoolean(USER_AAR)) {
        implementation("$GROUP:mmkv:1.0")
        implementation("$GROUP:log:1.0")
        implementation("$GROUP:xscan:1.0")
    } else {
        implementation project(':mmkv')
        implementation project(':log')
        implementation project(':xscan')
    }
    //----------第三方库----------------------------------------------------------------------------------------------------------
    //基于Rx1.6.1 RxAndroid1.2.1合成
    implementation project(':rxlib')
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation('com.squareup.retrofit2:adapter-rxjava:2.5.0') {
        exclude group: 'io.reactivex'
    }
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation('com.squareup.retrofit2:converter-protobuf:2.5.0') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
}
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}


//详细文档 https://github.com/shwenzhang/AndResGuard/blob/master/doc/how_to_work.zh-cn.md
andResGuard {
    //可以在mappingFile指向的文件添加保持资源命名的一致性
    mappingFile = null
    use7zip = false
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    /**
     * 所有使用getIdentifier(通过资源名称访问资源)访问的资源都需要加入白名单。
     * 第三方库需要加入白名单列表:https://github.com/shwenzhang/AndResGuard/blob/master/doc/white_list.md
     */
    whiteList = [

    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    /**
     * 在window上面使用7z生成的安装包会较大,出包请使用Linux(Mac亦可)
     * 配置7Zip
     * 在设置sevenzip时, 你只需设置artifact或path. 支持同时设置,总以path的值为优先.
     */
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.15'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果没有配置finalApkBackupPath，最终结果会覆盖assemble[BuildType | Flavor]的输出APK
     **/
//     finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}
